//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Dice"",
            ""id"": ""8e43fd8a-fcb7-409b-85a1-663ddb70c889"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""069a608c-d208-411d-a531-c88a4debe6fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnCounter"",
                    ""type"": ""Button"",
                    ""id"": ""bf7ff1e0-7658-4c37-8fdb-68196ca9f609"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseButton"",
                    ""type"": ""Button"",
                    ""id"": ""71154bfc-4107-4513-a89f-d8ffb712a2d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""a91f9429-ea4d-4299-b2fa-48c22d3e6bd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""8e7ecce6-6653-4fc4-923e-1dd2d33658bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""707a42d3-5150-4056-8cae-74dc9f1bb0b2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c4c45ac-d66c-4494-8030-2fea77cf8403"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnCounter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""387d8278-e9bb-4b45-835d-6c40e8c23d4b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ce8a9db-4d09-4dd1-baaa-4c23355c12a2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb4cadd9-d53a-4a0e-af38-a4fc4f784557"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dice
        m_Dice = asset.FindActionMap("Dice", throwIfNotFound: true);
        m_Dice_Roll = m_Dice.FindAction("Roll", throwIfNotFound: true);
        m_Dice_TurnCounter = m_Dice.FindAction("TurnCounter", throwIfNotFound: true);
        m_Dice_PauseButton = m_Dice.FindAction("PauseButton", throwIfNotFound: true);
        m_Dice_Hold = m_Dice.FindAction("Hold", throwIfNotFound: true);
        m_Dice_Shift = m_Dice.FindAction("Shift", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dice
    private readonly InputActionMap m_Dice;
    private IDiceActions m_DiceActionsCallbackInterface;
    private readonly InputAction m_Dice_Roll;
    private readonly InputAction m_Dice_TurnCounter;
    private readonly InputAction m_Dice_PauseButton;
    private readonly InputAction m_Dice_Hold;
    private readonly InputAction m_Dice_Shift;
    public struct DiceActions
    {
        private @PlayerControls m_Wrapper;
        public DiceActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_Dice_Roll;
        public InputAction @TurnCounter => m_Wrapper.m_Dice_TurnCounter;
        public InputAction @PauseButton => m_Wrapper.m_Dice_PauseButton;
        public InputAction @Hold => m_Wrapper.m_Dice_Hold;
        public InputAction @Shift => m_Wrapper.m_Dice_Shift;
        public InputActionMap Get() { return m_Wrapper.m_Dice; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DiceActions set) { return set.Get(); }
        public void SetCallbacks(IDiceActions instance)
        {
            if (m_Wrapper.m_DiceActionsCallbackInterface != null)
            {
                @Roll.started -= m_Wrapper.m_DiceActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_DiceActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_DiceActionsCallbackInterface.OnRoll;
                @TurnCounter.started -= m_Wrapper.m_DiceActionsCallbackInterface.OnTurnCounter;
                @TurnCounter.performed -= m_Wrapper.m_DiceActionsCallbackInterface.OnTurnCounter;
                @TurnCounter.canceled -= m_Wrapper.m_DiceActionsCallbackInterface.OnTurnCounter;
                @PauseButton.started -= m_Wrapper.m_DiceActionsCallbackInterface.OnPauseButton;
                @PauseButton.performed -= m_Wrapper.m_DiceActionsCallbackInterface.OnPauseButton;
                @PauseButton.canceled -= m_Wrapper.m_DiceActionsCallbackInterface.OnPauseButton;
                @Hold.started -= m_Wrapper.m_DiceActionsCallbackInterface.OnHold;
                @Hold.performed -= m_Wrapper.m_DiceActionsCallbackInterface.OnHold;
                @Hold.canceled -= m_Wrapper.m_DiceActionsCallbackInterface.OnHold;
                @Shift.started -= m_Wrapper.m_DiceActionsCallbackInterface.OnShift;
                @Shift.performed -= m_Wrapper.m_DiceActionsCallbackInterface.OnShift;
                @Shift.canceled -= m_Wrapper.m_DiceActionsCallbackInterface.OnShift;
            }
            m_Wrapper.m_DiceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @TurnCounter.started += instance.OnTurnCounter;
                @TurnCounter.performed += instance.OnTurnCounter;
                @TurnCounter.canceled += instance.OnTurnCounter;
                @PauseButton.started += instance.OnPauseButton;
                @PauseButton.performed += instance.OnPauseButton;
                @PauseButton.canceled += instance.OnPauseButton;
                @Hold.started += instance.OnHold;
                @Hold.performed += instance.OnHold;
                @Hold.canceled += instance.OnHold;
                @Shift.started += instance.OnShift;
                @Shift.performed += instance.OnShift;
                @Shift.canceled += instance.OnShift;
            }
        }
    }
    public DiceActions @Dice => new DiceActions(this);
    public interface IDiceActions
    {
        void OnRoll(InputAction.CallbackContext context);
        void OnTurnCounter(InputAction.CallbackContext context);
        void OnPauseButton(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
    }
}
